:PROPERTIES:
:ID:       4E2E6F0C-7921-4292-8530-E499362D9433
:END:
#+title: ~/.vim
#+author: Jeff Kreeftmeijer
#+html_path: /.vim/
#+date: 2010-07-06
#+description: Jeff Kreeftmeijer's Vim configuration
#+options: toc:nil

In my time using Vim, I switched between MacVim, regular Vim and NeoVim, project drawers and fuzzy file finding, Janus and custom configurations, and so on.
My current configuration is a result of that journey which tries to stay light on plugins and key mapping, while still providing a somewhat modern editor configuration.

My [[https://github.com/jeffkreeftmeijer/.vim/blob/main/.vimrc][=.vimrc= file]] is extracted from this document[fn:2010], meaning both should remain in sync.
Unless I'm experimenting with something locally that I haven't pushed yet, this document describes the configuration I'm currently using in my editor.

[fn:2010] Initially, this configuration didn't exist in this form, but I've published my Vim configuration in one way or another since 2010.
This document is the current revision.


#+toc: headlines

* NeoVim
:PROPERTIES:
:CUSTOM_ID: neovim
:END:

Recent versions of Vim caught up to most features NeoVim introduced, like true color support, background jobs and the inline terminal.
However, NeoVim comes with [[https://github.com/neovim/neovim/issues/2676][sensible defaults]] out of the box by implementing most of [[https://github.com/tpope/vim-sensible][vim-sensible]] by default.

As a good starting point, either install both Vim and vim-sensible, or NeoVim.
This configuration chooses the latter.

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:

#+headers: :cache yes
#+headers: :results output
#+headers: :prologue brew uninstall neovim > /dev/null
#+begin_src shell
  brew install neovim
#+end_src

#+RESULTS[5c5fde03521443ab0ae71daa9659f8d7955d6088]:
: ==> Downloading https://ghcr.io/v2/homebrew/core/neovim/manifests/0.5.0
: Already downloaded: /Users/jeffkreeftmeijer/Library/Caches/Homebrew/downloads/7720be5c43b475c91b5ae8b501f18845a1d36959250cba180975f35495243c99--neovim-0.5.0.bottle_manifest.json
: ==> Downloading https://ghcr.io/v2/homebrew/core/neovim/blobs/sha256:13d31cb537237f3b9245c6c2de0e55ae4d7730d06742aec5a3e98a5365934eae
: Already downloaded: /Users/jeffkreeftmeijer/Library/Caches/Homebrew/downloads/5e5a426fbb645f1c4a8c3b26c138ae8e8298c4b73a8e7969bae1fe0e6a2ba507--neovim--0.5.0.catalina.bottle.tar.gz
: ==> Pouring neovim--0.5.0.catalina.bottle.tar.gz
: üç∫  /usr/local/Cellar/neovim/0.5.0: 1,543 files, 21.2MB

#+headers: :exports both
#+headers: :results output
#+begin_src shell
  nvim --version | head -n1
#+end_src

#+RESULTS:
: NVIM v0.5.0

** Setup
:PROPERTIES:
:CUSTOM_ID: setup
:END:

Vim and NeoVim use different locations for the configuration file and home directory.
This configuration is checked out in Vim's default home directory, which contains the configuration file:

#+caption: Home directory and configuration file locations for Vim, NeoVim and this configuration
|                    | home directory   | configuration file        |
|--------------------+------------------+---------------------------|
| Vim                | ~~/.vim~         | ~~/.vimrc~                |
| NeoVim             | ~~/.config/nvim~ | ~~/.config/nvim/init.vim~ |
| This configuration | ~~/.vim~         | ~~/.vim/.vimrc~           |

To use this configuration, clone its repository to Vim's home directory path:

#+begin_src shell
  git clone git@github.com:jeffkreeftmeijer/.vim.git ~/.vim
#+end_src
  
To support NeoVim, symlink NeoVim's home directory and configuration file paths to Vim's:
  
#+begin_src shell
  mkdir -p ~/.config/
  ln -s ~/.vim ~/.config/nvim
  ln -s ~/.vim/.vimrc ~/.config/nvim/init.vim
  ln -s ~/.vim/.vimrc ~/.vimrc
#+end_src

#+RESULTS:

* Package management
:PROPERTIES:
:CUSTOM_ID: package-management
:END:

Vim 8 and NeoVim have a native package manager, which loads plugins from the =~/.vim/pack/plugins/start= directory[fn:plugins-dir].
To install a package, clone its repository into =~/.vim/pack/plugins/start=:

#+begin_src shell :eval no
  git clone git@github.com:tpope/vim-commentary.git \
    ~/.vim/pack/plugins/start/vim-commentary
#+end_src

When publishing dotfiles to a repository for reuse, it's convenient to use Git submodules instead of regular checkouts.
This allows for checking the dependencies into version control.
Instead of cloning, add a plugin as a submodule:

#+begin_src shell :eval no
  git submodule add git@github.com:tpope/vim-commentary.git \
    ~/.vim/pack/plugins/start/vim-commentary
#+end_src

Another option for installing plugins is using a plugin manager like [[https://github.com/junegunn/vim-plug][vim-plug]].
Instead of using Git checkouts or submodules, vim-plug handles the installing and updating of plugins.

The plugins themselves are configured through a list of calls to the =Plug= function in the =~/.vimrc= file:

#+begin_src vimrc :eval no
  Plug 'tpope/vim-commentary'
#+end_src

This configuration uses the latter in an attempt to contain most of the configuration in a single file.

** Vim-plug
:PROPERTIES:
:CUSTOM_ID: vim-plug
:END:

[[https://github.com/junegunn/vim-plug#vim][Vim-plug's documentation]] mentions installing the plugin into the autoload directory directly by running a script that downloads =plug.org= to the =~/.vim/autoload= directory:

#+begin_src shell :eval no
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+end_src

Instead, to have Vim install vim-plug on startup (again, to contain the configuration to a single file), this snippet automatically downloads =plug.vim= from its repository if it doesn't exist yet:

#+caption: =~/.vimrc=, downloading and installing vim-plug
#+begin_src vimrc :tangle .vimrc
  " Download plug.vim if it doesn't exist yet
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  endif
#+end_src

Normally, plugins are installed when calling =:PlugInstall= from within Vim.
To remove an extra step from the setup, this configuration runs a script on startup that checks for missing packages on startup and install them if needed:

#+caption: =~/.vimrc=, automatically installing plugins when starting Vim
#+begin_src vimrc :tangle .vimrc
" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source ~/.vimrc
\| endif
#+end_src

All other plugins are installed through vim-plug.

** Installing packages
:PROPERTIES:
:CUSTOM_ID: installing-packages
:END:

To install plugins with vim-plug, call the =Plug= function inside the plug-block:

#+begin_src vimrc :eval no
  call plug#begin("~/.vim/plugged")
  
  " TODO Add plugins
  
  call plug#end()
#+end_src

The =plug#begin("~/.vim/plugged")= function sets up the plugin directory[fn:default-plug-dir] and the =plug#end()= function initializes the plugin system.

To install a plugin, call the =Plug= function /inside/ the plug-block with an URL to a git repository:

#+begin_src vimrc :eval no
  Plug 'tpope/vim-commentary'
#+end_src

The =user/repository= assumes the plugin is hosted on GitHub.

** Creating and restoring package snapshots
:PROPERTIES:
:CUSTOM_ID: creating-and-restoring-package-snapshots
:END:

To write a lock file based on the currently installed plugin versions, run =:PlugSnapshot ~/.vim/snapshot.vim= inside Vim.
This creates a snapshot file in the specified path, which lists all installed plugins with their commit hashes.

#+caption: =snapshot.vim=, showing this configuration's currently installed version revisions
#+INCLUDE: "snapshot.vim" src vimrc

To restore from a snapshot, source the snapshot file inside Vim:

#+begin_example
:source ~/.vim/snapshot.vim
#+end_example

* Clipboard
:PROPERTIES:
:CUSTOM_ID: clipboard
:END:

Vim uses the "unnamed" register as the clipboard when copying or deleting text from a buffer.
To use the system clipboard, prefix the copy or delete command with ="*=.
For example, to copy the current line to the system clipboard, use ="*yy=.

To always use the system clipboard, append =unnamedplus= to the =clipboard= setting:

#+caption: =~/.vimrc=, configuring Vim to always use the system clipboard
#+begin_src vimrc :tangle .vimrc
  " Always use the system clipboard
  set clipboard+=unnamedplus
#+end_src

With this setting, =yy= copies the current line to the system clipboard, without needing to add the ="*= prefix.

* Packages
:PROPERTIES:
:CUSTOM_ID: packages
:END:

This configuration consists of nine packages installed with vim-plug and configuration for some of the packages.
The vim-plug plugin block lists all nine:

#+caption: =~/.vimrc=, listing all installed plugins
#+begin_src vimrc :tangle .vimrc :noweb yes
  call plug#begin("~/.vim/plugged")
  <<plug-polyglot>>
  <<plug-dim>>
  <<plug-nightfall>>
  <<plug-numbertoggle>>
  <<plug-tpope>>
  <<plug-coc>>
  <<plug-fzf>>
  call plug#end()
#+end_src

The rest of this section lists each plugin and describes its configuration.

** Polyglot
:PROPERTIES:
:CUSTOM_ID: polyglot
:END:

[[https://github.com/sheerun/vim-polyglot][Polyglot]] is a curated and frequently updated list [[https://github.com/sheerun/vim-polyglot#language-packs][list of more than 600 language packs]][fn:polyglot-add] to auto-load syntax highlighting and indentation rules.
Although the packs are downloaded on install, they're loaded on demand, so using Polyglot does not affect Vim's startup time.

[fn:polyglot-add] Polyglot should have all languages you need.
For language packs that aren't yet included, add them by sending a pull request.
For example, [[https://github.com/sheerun/vim-polyglot/pull/655][this pull request]] adds support for [[https://gleam.run][Gleam]] through [[https://github.com/gleam-lang/gleam.vim][gleam.vim.]]


#+name: plug-polyglot
#+begin_src vimrc :eval no
  Plug 'sheerun/vim-polyglot'
#+end_src

** Dim
:PROPERTIES:
:CUSTOM_ID: dim
:END:

Vim's default color scheme uses hardcoded color values (comments and some keywords are light blue, for example) that ignore the terminal's set ANSI colors.
[[https://github.com/jeffkreeftmeijer/vim-dim][Dim]] is a clone of Vim's default colorscheme, with some improvements.
It only uses ANSI colors, so specific color values are [[https://jeffkreeftmeijer.com/vim-16-color][configured in the terminal emulator]] instead of in Vim itself.

Dim's syntax highlighting is consistent to prevent color shifts between dark and light backgrounds.
It also makes sure to use /dimmed/ colors for comments and other non-code elements, to help distinguishing code from everything else.

#+name: plug-dim
#+begin_src vimrc
  Plug 'jeffkreeftmeijer/vim-dim'
#+end_src

After installing Dim, use it as the default colorscheme by setting =colorscheme= in =~/.vimrc=:

#+caption: =~/.vimrc=, setting the default colorscheme
#+headers: :tangle .vimrc
#+begin_src vimrc
  " Use Dim as the default color scheme
  colorscheme dim
#+end_src

** Nightfall
:PROPERTIES:
:CUSTOM_ID: nightfall
:END:

[[https://github.com/jeffkreeftmeijer/vim-nightfall][Nightfall]] automatically switches Vim's =bg= between "dark" and "light" based on macOS's dark mode.

#+name: plug-nightfall
#+begin_src vimrc
  Plug 'jeffkreeftmeijer/vim-nightfall'
#+end_src

** Surround.vim and commentary.vim
:PROPERTIES:
:CUSTOM_ID: surround-and-commentary
:END:

[[https://github.com/tpope][Tim Pope]]'s plugins are a staple of most Vim configurations.
This configuration includes Tim's [[https://github.com/tpope/vim-surround][surround.vim]] and [[https://github.com/tpope/vim-commentary][commentary.vim]] for working with surroundings and comments.

The former enables =s=, allowing for =ci"= to replace the contents of a double-quoted string, among many [[https://github.com/tpope/vim-surround#readme][other examples]].

The latter adds quick commenting.
Press =gcc= to comment out a line and =gc= to comment out a selection.

#+name: plug-tpope
#+begin_src vimrc
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
#+end_src

** Vim-numbertoggle
:PROPERTIES:
:CUSTOM_ID: vim-numbertoggle
:END:

Vim has [[https://jeffkreeftmeijer.com/vim-number/][absolute, relative and "hybrid" line numbers]] to help with locating lines in a file, and moving between files quickly.
[[https://github.com/jeffkreeftmeijer/vim-numbertoggle][Vim-numbertoggle]] is a plugin that automatically switches between absolute and hybrid line numbers when switching between normal and insert mode, or when Vim loses focus.

#+name: plug-numbertoggle
#+begin_src vimrc
  Plug 'jeffkreeftmeijer/vim-numbertoggle'
#+end_src

#+caption: =~/.vimrc=, turning on line numbers
#+headers: :tangle .vimrc
#+begin_src vimrc
  " Turn on line numbers
  set number
#+end_src

** Coc.nvim
:PROPERTIES:
:CUSTOM_ID: coc
:END:

[[https://github.com/neoclide/coc.nvim][Coc.nvim]] is a language server plugin to add code completion, inline documentation and compiler checks.

#+name: plug-coc
#+begin_src vimrc
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
#+end_src

After installing Coc.nvim, set =g:coc_global_extensions= to add language server extensions for Elixir, Ruby, Rust, Typescript and VimL:

#+caption: =~/.vimrc=, adding language server extensions
#+headers: :tangle .vimrc
#+begin_src vimrc
  " Install Coc extensions for Elixir, Ruby, Rust, Typescript and VimL
  let g:coc_global_extensions = ['coc-elixir', 'coc-solargraph', 'coc-rls', 'coc-tsserver', 'coc-vimlsp']
#+end_src

Automatically format Elixir, Rust and Typescript files on save by setting =g:coc_user_config= instead of using Coc's default JSON configuration file:

#+caption: =~/.vimrc=, adding languages to format on save
#+headers: :tangle .vimrc
#+begin_src vimrc
  " Automatically format Elixir, Rust and Typescript files on save
  let g:coc_user_config = {"coc.preferences.formatOnSaveFiletypes": ["elixir", "rust", "typescript"]}
#+end_src

Finally, use =<cr>= to select the topmost option during completion:

#+caption: =~/.vimrc=, setting up =<cr>= to select the topmost completion
#+headers: :tangle .vimrc
#+begin_src vimrc
  " Use <cr> to select the first completion
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
#+end_src

** Fzf.vim
:PROPERTIES:
:CUSTOM_ID: fzf
:END:

[[https://github.com/junegunn/fzf.vim][Fzf]].vim is a Vim plugin for the fzf command-line fuzzy finder.
It provides the =:Files=, =:Buffers= and =:Rg= commands to find and filter files, buffers, and lines, respectively.

#+name: plug-fzf
#+begin_src vimrc
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
#+end_src

[fn:plugins-dir] The name of the =start= directory in =~/.vim/pack/plugins/start= can be anything, but "start" seems to make sense.
[fn:default-plug-dir] Vim-plug uses the =~/.config/nvim/plugged= directory by default, but passing a different path to =plug#begin()= overwrites the plugin directory.

* Internal links                                                   :noexport:
- [[id:ABED24AB-F56D-4D23-BA8F-683BC6BB5831][Vim's absolute, relative and hybrid line numbers]]

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (load "~/.emacs.d/hacks/ox-md-with-title.el") (org-gfm-export-to-markdown)) nil t)
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
